#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('vue-leaflet-mobile-backend:server');
var pem = require('pem');
var https = require('https');


var getPem = function (options) {
  return new Promise(function (resolve, reject) {
    pem.createCertificate(options, function (err, key) {
      if (err) {
        reject(err);
      }
      resolve(key);
    })
  })
}


getPem({ day: 1, selfSigned: true }).then(function (keys) {
  var port = normalizePort(process.env.PORT || '3000');
  var server = https.createServer({ key: keys.serviceKey, cert: keys.certificate }, app.callback());
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
  /**
 * Event listener for HTTP server "listening" event.
 */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }
})




/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}


